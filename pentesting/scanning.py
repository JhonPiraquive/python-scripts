"""
    ---------------------------------
    | Automated Scanning Script     |
    ---------------------------------
    | Author: Alejandro Piraquive   |
    ---------------------------------
    | Version: 1.0                  |
    ---------------------------------
    | Date: 2024-06-09              |
    ---------------------------------
"""

# Imports Section
import nmap
import socket
import requests
import ipaddress
from scapy.all import ARP, Ether, srp, conf
import psutil

# Description Of the commands in this script
commands = {
    'get_my_ips': '\t\t\tGet your ips Local IP, Public IP, Gateway IP',
    'get_local_ip': '\t\t\tGet your Local IP',
    'get_public_ip': '\t\t\tGet your Public IP',
    'scan_network': '\t\t\tScan and get all active ips in a given network | Params: network:string, interface:string',
    'get_network_interfaces': '\t\tGet your network interfaces',
    'get_network_prefix': '\t\tGet your network prefix',
    # scan_ports_description = ''    
}

def get_my_ips():
    """
        Get your ips:
            - Local IP
            - Public IP
    """

    get_local_ip()
    get_public_ip()
    
def get_local_ip(print_info = True):
    """
        Get your Local IP
    """

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    local_ip = 'Undefined'

    try:
        # Connect to an external server to determine local IP
        sock.connect(('8.8.8.8', 80))
        local_ip = sock.getsockname()[0]
    finally:
        sock.close()
        
    if print_info:
        print(f'Local IP: {local_ip}')
    return local_ip

def get_public_ip(print_info = True):
    """
        Get your Public IP
    """

    try:
        public_ip = requests.get('http://checkip.amazonaws.com').text.strip()
    except requests.RequestException:
        public_ip = 'Undefined'

    if print_info:
        print(f'Public IP: {public_ip}')
    return public_ip

def scan_network():
    """
        Scan all ips in a network
    """

    nm = nmap.PortScanner()
    scan_result = nm.scan(hosts=get_network_prefix(False), arguments='-sn')  # -sn: Ping scan - disable port scan
    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]

    print(hosts_list)
    return hosts_list

def get_network_prefix(print_info = True):
    ip_segments = get_local_ip(False).split('.')[:3]
    network_prefix = '.'.join(ip_segments) + '.0/24'
    
    if print_info:
        print(f'Network Prefix: {network_prefix}')
    return network_prefix

def get_network_interfaces():
    """
        Get your network interfaces
    """

    # Obtiene las interfaces de red
    interfaces = psutil.net_if_addrs()

    # Imprime las interfaces de red y sus addresses
    for interface, addresses in interfaces.items():

        print(f"Interfaz: {interface}")

        for address in addresses:
            # Verifica el tipo de dirección y muestra la dirección
            if str(address.family) == 'AddressFamily.AF_INET':
                print(f"  IPv4: {address.address}")
            elif str(address.family) == 'AddressFamily.AF_INET6':
                print(f"  IPv6: {address.address}")

scan_network()